type: edu
files:
- name: src/antifraud/AntiFraudApplication.java
  visible: true
  text: |-
    package antifraud;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AntiFraudApplication {
        public static void main(String[] args) {
            SpringApplication.run(AntiFraudApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    server.error.include-message=always
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }


    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AntiFraudTest.java
  visible: false
  text: |-
    import antifraud.AntiFraudApplication;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestHint {
        private final String apiPath;
        private final String requestBody;
        private final String message;

        public TestHint(String apiPath, String requestBody, String message) {
            this.apiPath = apiPath;
            this.requestBody = requestBody;
            this.message = message;
        }

        @Override
        public String toString() {
            return "Test case\n" +
                    "Testing api: '" + apiPath + '\'' + "\n" +
                    (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                    "Expectations: '" + message + "'" + "\n" +
                    "-----";
        }
    }

    public class AntiFraudTest extends SpringTest {

        private final String transactionApi = "/api/antifraud/transaction";
        private final String userApi = "/api/auth/user";
        private final String userListApi = "/api/auth/list";
        private final String lockApi = "/api/auth/access";
        private final String roleApi = "/api/auth/role";
        private final String ipApi = "/api/antifraud/suspicious-ip";
        private final String cardApi = "/api/antifraud/stolencard";
        private final String historyApi = "/api/antifraud/history";

        List<Integer> userIdList = new ArrayList<>();

        private final String administrator = "{\n" +
                "   \"name\": \"administrator\",\n" +
                "   \"username\": \"administrator\",\n" +
                "   \"password\": \"oMoa4VvqnLxW\"\n" +
                "}";

        private final String johndoe1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String johndoe2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe2\",\n" +
                "   \"password\": \"oMoa5VvqnLxW\"\n" +
                "}";

        private final String johndoe3 = "{\n" +
                "   \"name\": \"John Doe 3\",\n" +
                "   \"username\": \"johndoe3\",\n" +
                "   \"password\": \"oMoa6VvqnLxW\"\n" +
                "}";

        private final String wronguser1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguser2 = "{\n" +
                "   \"name\": \"John Doe 2\",\n" +
                "   \"username\": \"johndoe1\"\n" +
                "}";

        private final String wronguserCred1 = "{\n" +
                "   \"name\": \"John Doe 1\",\n" +
                "   \"username\": \"johndoe1\",\n" +
                "   \"password\": \"oa3VvqnLxW\"\n" +
                "}";

        private final String wronguserCred2 = "{\n" +
                "   \"name\": \"John Do\",\n" +
                "   \"username\": \"johndo\",\n" +
                "   \"password\": \"oMoa3VvqnLxW\"\n" +
                "}";

        private final String listAnswer1 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"name\" : \"John Doe 1\",\n" +
                "  \"username\" : \"johndoe1\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer2 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"MERCHANT\"\n" +
                "} ]";

        private final String listAnswer3 = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"name\" : \"administrator\",\n" +
                "  \"username\" : \"administrator\",\n" +
                "  \"role\" : \"ADMINISTRATOR\"\n" +
                "}, {\n" +
                "  \"id\" : 4,\n" +
                "  \"name\" : \"John Doe 2\",\n" +
                "  \"username\" : \"johndoe2\",\n" +
                "  \"role\" : \"SUPPORT\"\n" +
                "} ]";

        private final String tr1 = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String tr2 = "{\n" +
                "  \"amount\": 199,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:01:00\"\n" +
                "}";

        private final String tr3 = "{\n" +
                "  \"amount\": 200,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:02:00\"\n" +
                "}";

        private final String tr4 = "{\n" +
                "  \"amount\": 201,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:03:00\"\n" +
                "}";

        private final String tr5 = "{\n" +
                "  \"amount\": 1499,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:04:00\"\n" +
                "}";

        private final String tr6 = "{\n" +
                "  \"amount\": 1500,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:05:00\"\n" +
                "}";

        private final String tr7 = "{\n" +
                "  \"amount\": 1501,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:06:00\"\n" +
                "}";

        private final String tr8 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:07:00\"\n" +
                "}";

        private final String tr9 = "{\n" +
                "  \"amount\": 210,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T16:03:00\"\n" +
                "}";

        private final String tr10 = "{\n" +
                "  \"amount\": 202,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T16:04:00\"\n" +
                "}";

        private final String tr11 = "{\n" +
                "  \"amount\": 203,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:04:00\"\n" +
                "}";

        private final String tr12 = "{\n" +
                "  \"amount\": 1161,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:04:00\"\n" +
                "}";

        private final String tr13 = "{\n" +
                "  \"amount\": 163,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:08:00\"\n" +
                "}";

        private final String tr14 = "{\n" +
                "  \"amount\": 131,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:18:00\"\n" +
                "}";

        private final String tr15 = "{\n" +
                "  \"amount\": 929,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T19:28:00\"\n" +
                "}";

        private final String tr16 = "{\n" +
                "  \"amount\": 289,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String tr17 = "{\n" +
                "  \"amount\": 930,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String tr18 = "{\n" +
                "  \"amount\": 931,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-23T20:28:00\"\n" +
                "}";

        private final String trW1 = "{\n" +
                "  \"amount\": -1,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW2 = "{\n" +
                "  \"amount\": 0,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW3 = "{\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW4 = "{\n" +
                "  \"amount\": \" \",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW5 = "{\n" +
                "  \"amount\": \"\",\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trW6 = "{ }";

        private final String trP1 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP2 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.1\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP3 = "{\n" +
                "  \"amount\": 1000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        private final String trP4 = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.67\",\n" +
                "  \"number\": \"4000003305160034\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T16:00:00\"\n" +
                "}";

        // correlation rules
        private final String corr1IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:10:00\"\n" +
                "}";

        private final String corr2IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:11:00\"\n" +
                "}";

        private final String corr22IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.3\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr3IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.4\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:12:00\"\n" +
                "}";

        private final String corr4IP = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:13:00\"\n" +
                "}";

        private final String corr5IP = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.5\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-22T17:14:00\"\n" +
                "}";

        private final String corr1Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"EAP\",\n" +
                "  \"date\": \"2022-01-21T17:10:00\"\n" +
                "}";

        private final String corr2Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:11:00\"\n" +
                "}";

        private final String corr22Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"ECA\",\n" +
                "  \"date\": \"2022-01-21T17:12:00\"\n" +
                "}";

        private final String corr3Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"HIC\",\n" +
                "  \"date\": \"2022-01-21T17:13:00\"\n" +
                "}";

        private final String corr4Reg = "{\n" +
                "  \"amount\": 1,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SSA\",\n" +
                "  \"date\": \"2022-01-21T17:14:00\"\n" +
                "}";

        private final String corr5Reg = "{\n" +
                "  \"amount\": 2000,\n" +
                "  \"ip\": \"192.168.1.2\",\n" +
                "  \"number\": \"4000008449433403\",\n" +
                "  \"region\": \"SA\",\n" +
                "  \"date\": \"2022-01-21T17:15:00\"\n" +
                "}";





        private final String ipAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"ip\" : \"192.168.1.66\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"ip\" : \"192.168.1.67\"\n" +
                "} ]";

        private final String ipAnswerEmpty = "[]";

        private final String cardAnswerEmpty = "[]";

        private final String cardAnswer = "[ {\n" +
                "  \"id\" : 1,\n" +
                "  \"number\" : \"4000003305061034\"\n" +
                "}, {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String cardAnswer2 = "[ {\n" +
                "  \"id\" : 2,\n" +
                "  \"number\" : \"4000003305160034\"\n" +
                "} ]";

        private final String historyAnswer = "[ {\n" +
                "  \"transactionId\" : 1,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 2,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 3,\n" +
                "  \"amount\" : 199,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:01:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 4,\n" +
                "  \"amount\" : 200,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:02:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 5,\n" +
                "  \"amount\" : 201,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:03:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 6,\n" +
                "  \"amount\" : 1499,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:04:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 7,\n" +
                "  \"amount\" : 1500,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:05:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 8,\n" +
                "  \"amount\" : 1501,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:06:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 9,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:07:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 10,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 11,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 12,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 13,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 14,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 15,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:10:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 16,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.3\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:11:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 17,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.3\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:12:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 18,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.4\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:12:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 19,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.5\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:13:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 20,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.5\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T17:14:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 21,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-21T17:10:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 22,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"ECA\",\n" +
                "  \"date\" : \"2022-01-21T17:11:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 23,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"ECA\",\n" +
                "  \"date\" : \"2022-01-21T17:12:00\",\n" +
                "  \"result\" : \"ALLOWED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 24,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"HIC\",\n" +
                "  \"date\" : \"2022-01-21T17:13:00\",\n" +
                "  \"result\" : \"MANUAL_PROCESSING\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 25,\n" +
                "  \"amount\" : 1,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"SSA\",\n" +
                "  \"date\" : \"2022-01-21T17:14:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 26,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000008449433403\",\n" +
                "  \"ip\" : \"192.168.1.2\",\n" +
                "  \"region\" : \"SA\",\n" +
                "  \"date\" : \"2022-01-21T17:15:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "} ]\n";

        private final String historyAnswer2 = "[ {\n" +
                "  \"transactionId\" : 12,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.1\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 13,\n" +
                "  \"amount\" : 1000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "}, {\n" +
                "  \"transactionId\" : 14,\n" +
                "  \"amount\" : 2000,\n" +
                "  \"number\" : \"4000003305160034\",\n" +
                "  \"ip\" : \"192.168.1.67\",\n" +
                "  \"region\" : \"EAP\",\n" +
                "  \"date\" : \"2022-01-22T16:00:00\",\n" +
                "  \"result\" : \"PROHIBITED\",\n" +
                "  \"feedback\" : \"\"\n" +
                "} ]";




        public AntiFraudTest() {
            super(AntiFraudApplication.class, "../service_db.mv.db");
        }

        /**
         * Method for restarting application
         *
         */
        private CheckResult restartApplication() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }

        private HttpResponse checkResponseStatus(String user, String body,
                                                 int status, String api, String method) {
            HttpRequest request = null;
            switch (method) {
                case "GET":
                    request = get(api);
                    break;
                case "POST":
                    request = post(api, body);
                    break;
                case "PUT":
                    request = put(api, body);
                    break;
                case "DELETE":
                    request = delete(api);
                    break;
            }

            if (user != null) {
                JsonObject userJson = getJson(user).getAsJsonObject();
                String password = userJson.get("password").getAsString();
                String login = userJson.get("username").getAsString().toLowerCase();
                request = request.basicAuth(login, password);
            }
            HttpResponse response = request.send();

            if (response.getStatusCode() != status) {
                throw new WrongAnswer(method + " " + api  + " should respond with "
                        + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                        + "Response body:\n" + response.getContent() + "\n");
            }
            return response;
        }

        public boolean isNumeric(String strNum) {
            if (strNum == null) {
                return false;
            }
            try {
                long l = Long.parseLong(strNum);
            } catch (NumberFormatException nfe) {
                return false;
            }
            return true;
        }

        CheckResult testAddUser(String body, int status, String role, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");

            if (response.getStatusCode() == 201) {

                JsonObject rightResponse = getJson(body).getAsJsonObject();
                rightResponse.remove("password");

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check if password is presence in response
                if (jsonResponse.get("password") != null) {
                    return CheckResult.wrong("You must remove password from response\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id") == null) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (jsonResponse.get("id").isJsonNull()) {
                    return CheckResult.wrong("Response must contain user ID\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                    return CheckResult.wrong("User ID must be unique!\n" +
                            "Received response:\n" +
                            jsonResponse);
                }

                rightResponse.addProperty("id", jsonResponse.get("id").toString());
                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", rightResponse.get("name").getAsString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                );
                userIdList.add(jsonResponse.get("id").getAsInt());
            }
            return CheckResult.correct();
        }

        CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");

            if (response.getStatusCode() == 200) {

                // Check is it JSON in response or something else
                if (!response.getJson().isJsonObject()) {
                    return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonObject jsonResponse = response.getJson().getAsJsonObject();

                // Check JSON in response
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Deleted successfully!")
                                .value("username", isString(s -> s.equalsIgnoreCase(user)))
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testListUser(String user, int status, String answer,
                                         int position, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");

            if (response.getStatusCode() == 200) {
                // Check is it array of JSON in response or something else
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                if (responseJson.size() == 0) {
                    throw new WrongAnswer("Empty array in response!");
                }

                if (responseJson.size() != position + 1) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " users in response, must be - " + (position + 1));
                }

                // Check JSON in response
                expect(responseJson.get(position).toString()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                .value("username",
                                        isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                .get("username").getAsString()))
                                ));

            }
            return CheckResult.correct();
        }

        private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("operation", operation);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", isString(s ->
                                        s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
            }
            return CheckResult.correct();
        }

        private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("username", username);
            jsonBody.addProperty("role", role);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("name", isString())
                                .value("role", role)
                                .value("username", isString(s -> s.equalsIgnoreCase(username))));
            }
            return CheckResult.correct();
        }

        private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                            String answer, String answer2, TestHint hint) {

            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, body, status, api, method);

            // Check JSON in response
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("result", answer)
                                .value("info", answer2));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("ip", ip);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("ip", ip));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "IP " + ip + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("number", number);

            HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("id", isInteger())
                                .value("number", number));
            }
            return CheckResult.correct();
        }

        private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("status", "Card " + number + " successfully removed!"));
            }
            return CheckResult.correct();
        }

        private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("id", isInteger())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetTr(String user, int status, String answer, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status, historyApi, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("transactionId", isInteger())
                                    .value("amount", correctJson.get(i).getAsJsonObject().get("amount").getAsLong())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                                    .value("region", correctJson.get(i).getAsJsonObject().get("region").getAsString())
                                    .value("date", correctJson.get(i).getAsJsonObject().get("date").getAsString())
                                    .value("result", correctJson.get(i).getAsJsonObject().get("result").getAsString())
                                    .value("feedback", correctJson.get(i).getAsJsonObject().get("feedback").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testGetTrByNumber(String user, int status, String answer,
                                              String number, TestHint hint) {
            System.out.println(hint.toString());

            HttpResponse response = checkResponseStatus(user, "", status,
                    historyApi + "/" + number, "GET");

            if (response.getStatusCode() == 200) {
                if (!response.getJson().isJsonArray()) {
                    return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                            response.getContent().getClass());

                }

                JsonArray correctJson = getJson(answer).getAsJsonArray();
                JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

                if (responseJson.size() != correctJson.size()) {
                    throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                            " objects in response, must be - " + correctJson.size());
                }

                // Check JSON in response
                for (int i =0; i < correctJson.size(); i++) {
                    expect(responseJson.get(i).toString()).asJson().check(
                            isObject()
                                    .value("transactionId", isInteger())
                                    .value("amount", correctJson.get(i).getAsJsonObject().get("amount").getAsLong())
                                    .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                                    .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                                    .value("region", correctJson.get(i).getAsJsonObject().get("region").getAsString())
                                    .value("date", correctJson.get(i).getAsJsonObject().get("date").getAsString())
                                    .value("result", correctJson.get(i).getAsJsonObject().get("result").getAsString())
                                    .value("feedback", correctJson.get(i).getAsJsonObject().get("feedback").getAsString())
                    );
                }

            }
            return CheckResult.correct();
        }

        private CheckResult testFeed(String userS, String userM, int status, int position,
                                     String fb, TestHint hint) {
            System.out.println(hint.toString());
            HttpResponse response = checkResponseStatus(userS, "", 200, historyApi, "GET");

            if (!response.getJson().isJsonArray()) {
                return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                        response.getContent().getClass());

            }

            JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
            if (responseJson.size() < (position + 1)) {
                throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                        " transactions in history, must be at least - " + (position + 1));
            }

            if (!responseJson.get(position).getAsJsonObject().has("transactionId")) {
                return CheckResult.wrong("Json in response must have - 'id' field");
            }

            Long id = responseJson.get(position).getAsJsonObject().get("transactionId").getAsLong();

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("transactionId", id);
            jsonBody.addProperty("feedback", fb);

            response = checkResponseStatus(userM, jsonBody.toString(), status, transactionApi, "PUT");

            JsonObject answerJson = responseJson.get(position).getAsJsonObject();

            if (response.getStatusCode() == 200) {
                expect(response.getContent()).asJson().check(
                        isObject()
                                .value("transactionId", isInteger())
                                .value("amount", answerJson.get("amount").getAsLong())
                                .value("ip", answerJson.get("ip").getAsString())
                                .value("number", answerJson.get("number").getAsString())
                                .value("region", answerJson.get("region").getAsString())
                                .value("date", answerJson.get("date").getAsString())
                                .value("result", answerJson.get("result").getAsString())
                                .value("feedback", fb)
                );
            }
            return CheckResult.correct();
        }

        private CheckResult testNotFoundFeed(String userS, String userM, int status, int position,
                                             String fb, TestHint hint) {
            System.out.println(hint.toString());
            HttpResponse response = checkResponseStatus(userS, "", 200, historyApi, "GET");
            JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
            if (responseJson.size() < (position + 1)) {
                throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                        " transactions in history, must be at least - " + (position + 1));
            }
            Long id = responseJson.get(position).getAsJsonObject().get("transactionId").getAsLong() + 12345L;

            JsonObject jsonBody = new JsonObject();
            jsonBody.addProperty("transactionId", id);
            jsonBody.addProperty("feedback", fb);

            return CheckResult.correct();
        }


        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
                // Test POST request for signup api
                () -> testAddUser(wronguser1, 400, "MERCHANT",
                        new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 1

                () -> testAddUser(wronguser2, 400, "MERCHANT",
                        new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                " must respond with BAD REQUEST  status (400).")), // 2

                () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 3

                () -> testListUser(administrator, 200,  listAnswer1, 0,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 4


                () -> testAddUser(johndoe1, 201, "MERCHANT",
                        new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 5

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 6

                () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7

                () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                        new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8

                () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "Merchant after registration" +
                                " must be LOCKED")), // 9

                () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                        new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10

                () -> testRole(administrator,200,"SUPPORT", "johndoe1",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 11

                () -> testGetTr(johndoe1, 200, "[]",
                        new TestHint(historyApi, "", "User johndoe1 must be unlocked." +
                                "Endpoint must respond with the HTTP OK status (200) and" +
                                " empty array in case if history is empty.")), // 12


                () -> testRole(administrator,200,"MERCHANT", "johndoe1",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 13


                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 14

                () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 15

                // Testing persistence
                () -> restartApplication(), // 16

                () -> testListUser(administrator, 200,  listAnswer1, 1,
                        new TestHint(userListApi, "", "After restart user must exist")), // 17

                () -> testAddUser(johndoe1, 409, "MERCHANT",
                        new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                " endpoint must respond with HTTP CONFLICT status (409).")), // 18

                () -> testAddUser(johndoe2, 201, "MERCHANT",
                        new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 19

                () -> testListUser(administrator, 200,  listAnswer1, 2,
                        new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                " and body with array of objects representing the users sorted by ID in ascending order.")), // 20

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 21

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                        "ALLOWED", "none",
                        new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                " must be 'ALLOWED'")), // 22

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 23

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 24

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                        "MANUAL_PROCESSING", "amount",
                        new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                " must be 'MANUAL_PROCESSING'")), // 25

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 26

                () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                        "PROHIBITED", "amount",
                        new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                " must be 'PROHIBITED'")), // 27

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = -1", "Response status" +
                                " must be 'Bad request'")), // 28

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = 0", "Response status" +
                                " must be 'Bad request'")), // 29

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = null", "Response status" +
                                " must be 'Bad request'")), // 30

                () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                        "Wrong request!", "none",
                        new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                " must be 'Bad request'")), // 31

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                        "Wrong request!",  "none",
                        new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                " must be 'Bad request'")), // 32

                () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                        "Wrong request!",   "none",
                        new TestHint(transactionApi, "empty body", "Response status" +
                                " must be 'Bad request'")), // 33

                () -> testDeleteUser(administrator,404,"somebody",
                        new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                " respond with HTTP Not Found status (404).")), // 34

                () -> testDeleteUser(administrator,200,"johndoe1",
                        new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                " the user and respond with HTTP OK status (200)")), // 35

                () -> testListUser(administrator, 200,  listAnswer2, 1,
                        new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 36

                () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                        new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                " must respond with the HTTP Not Found status (404).")), // 37

                () -> testRole(administrator,400,"USER", "johndoe2",
                        new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 38

                () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                        new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                " must respond with the HTTP Bad Request status (400).")), // 39

                () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role successfully changed," +
                                " respond with the HTTP OK status (200)")), // 40

                () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                        new TestHint(roleApi, "", "If a role already assigned to a user," +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 41

                () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                        new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 42

                () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                        new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                "' must be changed to SUPPORT")), // 43

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",   "none",
                        new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                " user johndoe2!")), // 44

                // test Locking
                () -> testAddUser(johndoe3, 201, "MERCHANT",
                        new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                " must respond with HTTP CREATED status (201) ")), // 45

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                " must be LOCKED")), // 46

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 47

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 48

                () -> testLock(administrator, 200, "LOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 49

                () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 50

                () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                        new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 51

                // test role model
                () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to " + transactionApi)), // 52

                () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                " must not have access to " + transactionApi)), // 53

                () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + transactionApi)), // 54

                () -> testDeleteUser(null,401,"johndoe1",
                        new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                " must not have access to DELETE " + userApi)), // 55

                () -> testDeleteUser(johndoe2,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role SUPPORT" +
                                " must not have access to DELETE " + userApi)), // 56

                () -> testDeleteUser(johndoe3,403,"johndoe1",
                        new TestHint(userApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + userApi)), // 57

                () -> testListUser(null, 401,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                " must not have access to " + userListApi)), // 58

                () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                        new TestHint(userListApi, "", "A user with role MERCHANT" +
                                " must not have access to " + userListApi)), // 59

                () -> testGetIP(administrator, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + ipApi)), // 60

                () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + ipApi)), // 61

                () -> testAddIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + ipApi)), // 62

                () -> testAddIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + ipApi)), // 63

                () -> testDeleteIP(administrator, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + ipApi)), // 64

                () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                        new TestHint(ipApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + ipApi)), // 65

                () -> testGetCard(administrator, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + cardApi)), // 66

                () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + cardApi)), // 67

                () -> testAddCard(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to POST " + cardApi)), // 68

                () -> testAddCard(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to POST " + cardApi)), // 69

                () -> testDeleteIP(administrator, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to DELETE " + cardApi)), // 70

                () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                        new TestHint(cardApi, "", "A user with role MERCHANT" +
                                " must not have access to DELETE " + cardApi)), // 71


                // Test ip black list
                () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                        new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 72

                () -> testAddIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 73

                () -> testAddIP(johndoe2, 409, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP already in database, " +
                                " endpoint must respond with the HTTP Conflict status (409).")), // 74

                () -> testAddIP(johndoe2, 400, "192.168.351.66",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 75

                () -> testAddIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 76

                () -> testAddIP(johndoe2, 200, "192.168.1.67",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 77

                () -> testGetIP(johndoe2, 200, ipAnswer,
                        new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 78

                () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 79

                () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                        new TestHint(ipApi, "", "If IP not found in database, " +
                                "respond with the HTTP Not Found status (404).")), // 80

                () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                        new TestHint(ipApi, "", "If IP doesn't have right format," +
                                " respond with HTTP Bad Request status (400)")), // 81

                () -> testGetIP(johndoe2, 200, ipAnswer2,
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 82


                // Test card number black list
                () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                        new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 83

                () -> testAddCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 84

                () -> testAddCard(johndoe2, 409, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number already in database, " +
                                "endpoint must respond with the HTTP Conflict status (409).")), // 85

                () -> testAddCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 86

                () -> testAddCard(johndoe2, 400, "4000003305061033",
                        new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 87

                () -> testAddCard(johndoe2, 200, "4000003305160034",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 88

                () -> testGetCard(johndoe2, 200, cardAnswer,
                        new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 89

                () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 90

                () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                        new TestHint(cardApi, "", "If card-number not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 91

                () -> testDeleteCard(johndoe2, 400, "400000330506103",
                        new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                "endpoint must respond with HTTP Bad Request status (400).")), // 92

                () -> testGetCard(johndoe2, 200, cardAnswer2,
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 93

                // Test new validating
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                        "PROHIBITED",  "ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - suspicious ip reason")), // 94

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                        "PROHIBITED",  "card-number",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card reason")), // 95

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                        "PROHIBITED",  "card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - stolen card, suspicious ip reasons")), // 96

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                        "PROHIBITED",  "amount, card-number, ip",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, stolen card, suspicious ip reasons")), // 97

                // Test correlation rules
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 98

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 99

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 100

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                        "MANUAL_PROCESSING",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - ip correlation rule")), // 101

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                        "PROHIBITED",  "ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - ip correlation rule")), // 102

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 103

                () -> testAddIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 104

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                        "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, ip-correlation reasons")), // 105
                //
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 106

                () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                        new TestHint(ipApi, "", "IP must be removed from Black List")), // 107


                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 108

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 109

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 110

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                        "MANUAL_PROCESSING",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                " due to - region correlation rule")), // 111

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                        "PROHIBITED",  "region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - region correlation rule")), // 112

                () -> testAddCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "A card must be added to Black List")), // 113

                () -> testAddIP(johndoe2, 200, "192.168.1.2",
                        new TestHint(ipApi, "", "IP must be added to Black List")), // 114

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                        "PROHIBITED",  "amount, card-number, ip, region-correlation",
                        new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                " due to - amount, card-number, ip, region-correlation reasons")), // 115


                // Stage 6 let's go

                // Preparations
                () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                        new TestHint(cardApi, "", "Card must be removed from Black List")), // 116

                // Test history negative
                () -> testGetTrByNumber(johndoe2, 404, historyAnswer2, "4000004938320896",
                        new TestHint(historyApi + "/4000004938320896", "", "If transactions " +
                                "for specified card number is not found in database," +
                                " respond with the HTTP Not Found status (404).")), // 117

                () -> testGetTrByNumber(johndoe2, 400, historyAnswer2, "4000008449433402",
                        new TestHint(historyApi + "/4000008449433402", "", "If card-number " +
                                "doesn't have right format (Luhn algo), respond with HTTP Bad Request status (400).")), // 118

                // Test Feedback negative
                () -> testFeed(johndoe2, johndoe2, 422, 0, "ALLOWED",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 119

                () -> testFeed(johndoe2, johndoe2, 422, 4, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 120

                () -> testFeed(johndoe2, johndoe2, 422, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "If feedback must throw Exception due to" +
                                " table in description section, respond with HTTP Unprocessable Entity status 422.")), // 121

                () -> testNotFoundFeed(johndoe2, johndoe2, 404, 25, "PROHIBITED",
                        new TestHint(transactionApi, "", "If transaction is not found in history," +
                                " respond with the HTTP Not Found status (404).")), // 122

                // test Role model
                () -> testFeed(johndoe2, null, 401, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                " must not have access to PUT " + transactionApi)), // 123

                () -> testFeed(johndoe2, administrator, 403, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to PUT " + transactionApi)), // 124

                () -> testFeed(johndoe2, johndoe3, 403, 7, "PROHIBITED",
                        new TestHint(transactionApi, "", "A user with role MERCHANT" +
                                " must not have access to PUT " + transactionApi)), // 125

                () -> testGetTr(null, 401, historyAnswer,
                        new TestHint(historyApi, "", "A user with role ANONYMOUS" +
                                " must not have access to GET " + historyApi)), // 126

                () -> testGetTrByNumber(null, 401, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role ANONYMOUS must not have access to GET " + historyApi)), // 127

                () -> testGetTr(administrator, 403, historyAnswer,
                        new TestHint(historyApi, "", "A user with role ADMINISTRATOR" +
                                " must not have access to GET " + historyApi)), // 128

                () -> testGetTrByNumber(administrator, 403, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role ADMINISTRATOR must not have access to GET " + historyApi)), // 129

                () -> testGetTr(johndoe3, 403, historyAnswer,
                        new TestHint(historyApi, "", "A user with role MERCHANT" +
                                " must not have access to GET " + historyApi)), // 130

                () -> testGetTrByNumber(johndoe3, 403, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "A user with" +
                                " role MERCHANT must not have access to GET " + historyApi)), // 131


                // test History positive
                () -> testGetTr(johndoe2, 200, historyAnswer,
                        new TestHint(historyApi, "", "Endpoint must respond with the" +
                                " HTTP OK status (200) and body with array of JSON objects representing transactions," +
                                " sorted by id in ascending order")), // 132

                () -> testGetTrByNumber(johndoe2, 200, historyAnswer2, "4000003305160034",
                        new TestHint(historyApi + "/4000003305160034", "", "If transactions" +
                                " for specified card number is found, respond with the HTTP OK status (200)")), // 133


                // Test changing coefficients
                // Result - MANUAL_PROCESSING, FeedBack - ALLOWED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr9,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING")), // 134

                () -> testFeed(johndoe2, johndoe2, 200, 26, "ALLOWED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 135

                () -> testFeed(johndoe2, johndoe2, 409, 26, "PROHIBITED",
                        new TestHint(transactionApi, "", "If feedback for specified transaction" +
                                " is already in database, respond with the HTTP Conflict status (409).")), // 136

                () -> testFeed(johndoe2, johndoe2, 400, 26, "ALLOWEDD",
                        new TestHint(transactionApi, "", "If feedback doesn't have right format" +
                                " (ALLOWED, MANUAL_PROCESSING, PROHIBITED), respond with HTTP Bad Request status (400).")), // 137

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr10,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 202, Manual = 1500. Transaction must be ALLOWED")), // 138


                // Result - MANUAL_PROCESSING, FeedBack - PROHIBITED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr11,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING")), // 139

                () -> testFeed(johndoe2, johndoe2, 200, 28, "PROHIBITED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 140

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr12,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 202, Manual = 1160. " +
                                "Transaction must be PROHIBITED")), // 141


                // Result - ALLOWED, FeedBack - MANUAL_PROCESSING
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 142

                () -> testFeed(johndoe2, johndoe2, 200, 30, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 143

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr13,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 162, Manual = 1160. Transaction must be MANUAL_PROCESSING")), // 144


                // Result - ALLOWED, FeedBack - PROHIBITED
                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 145

                () -> testFeed(johndoe2, johndoe2, 200, 32, "PROHIBITED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 146

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr14,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 130, Manual = 928. Transaction must be MANUAL_PROCESSING")), // 147

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr15,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 130, Manual = 928. Transaction must be PROHIBITED")), // 148


                // Result - PROHIBITED, FeedBack - ALLOWED
                () -> testFeed(johndoe2, johndoe2, 200, 34, "ALLOWED",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 149

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr16,
                        "ALLOWED",  "none",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 929. Transaction must be ALLOWED")), // 150

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr15,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 929. Transaction must be MANUAL_PROCESSING")), // 151

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr17,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "PROHIBITED")), // 152


                // Result - PROHIBITED, FeedBack - MANUAL_PROCESSING
                () -> testFeed(johndoe2, johndoe2, 200, 37, "MANUAL_PROCESSING",
                        new TestHint(transactionApi, "", "The limits of transaction validation updated." +
                                "Endpoint responds with the HTTP OK status (200)")), // 153

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr17,
                        "MANUAL_PROCESSING",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 930. Transaction must be MANUAL_PROCESSING")), // 154

                () -> restartApplication(), // 155

                () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr18,
                        "PROHIBITED",  "amount",
                        new TestHint(transactionApi, "", "Limits must be updated to:" +
                                " Allow = 290, Manual = 930. Transaction must be PROHIBITED")), // 156

        };
    }
  learner_created: false
- name: src/antifraud/security/AuthenticationFacade.java
  visible: true
  text: |+
    package antifraud.security;

    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.stereotype.Component;

    @Component
    public class AuthenticationFacade implements IAuthenticationFacade {

        public AuthenticationFacade() {
            super();
        }

        // API

        @Override
        public final Authentication getAuthentication() {
            return SecurityContextHolder.getContext().getAuthentication();
        }

    }

  learner_created: true
- name: src/antifraud/business/UserStatus.java
  visible: true
  text: |
    package antifraud.business;

    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    @JsonPropertyOrder({"username", "status"})
    public class UserStatus {
        private String username;
        private String operation;

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/antifraud/business/SuspiciousIp.java
  visible: true
  text: |
    package antifraud.business;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;

    @Entity
    @Table
    public class SuspiciousIp {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column
        @NotNull
        private String ip;

        public SuspiciousIp() {
        }

        public SuspiciousIp(String ip) {
            this.ip = ip;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getIp() {
            return ip;
        }

        public void setIp(String ip) {
            this.ip = ip;
        }
    }
  learner_created: true
- name: src/antifraud/security/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package antifraud.security;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response,
                AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/antifraud/business/ParameterChecker.java
  visible: true
  text: |
    package antifraud.business;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class ParameterChecker {

        // Function to validate the IPs address.
        public static boolean isValidIPAddress(String ip) {

            // Regex for digit from 0 to 255.
            String zeroTo255
                    = "(\\d{1,2}|(0|1)\\"
                    + "d{2}|2[0-4]\\d|25[0-5])";

            // Regex for a digit from 0 to 255 and
            // followed by a dot, repeat 4 times.
            // this is the regex to validate an IP address.
            String regex
                    = zeroTo255 + "\\."
                    + zeroTo255 + "\\."
                    + zeroTo255 + "\\."
                    + zeroTo255;

            // Compile the ReGex
            Pattern p = Pattern.compile(regex);

            // If the IP address is empty
            // return false
            if (ip == null) {
                return false;
            }

            // Pattern class contains matcher() method
            // to find matching between given IP address
            // and regular expression.
            Matcher m = p.matcher(ip);

            // Return if the IP address
            // matched the ReGex
            return m.matches();
        }

        public static boolean checkLuhn(String cardNo) {
            int nDigits = cardNo.length();

            int nSum = 0;
            boolean isSecond = false;
            for (int i = nDigits - 1; i >= 0; i--)
            {

                int d = cardNo.charAt(i) - '0';

                if (isSecond == true)
                    d = d * 2;

                // We add two digits to handle
                // cases that make two digits
                // after doubling
                nSum += d / 10;
                nSum += d % 10;

                isSecond = !isSecond;
            }
            return (nSum % 10 == 0);
        }



    }
  learner_created: true
- name: src/antifraud/business/Amount.java
  visible: true
  text: |
    package antifraud.business;

    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import javax.persistence.*;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;

    @Entity
    @Table
    public class Amount {

        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @Column
        private long amount;

        @Column
        private String ip;

        @Column
        private String number;

        @Column
        private String region;

        @Column
        private LocalDateTime date;


        public static final long ALLOWED_LIMIT = 200l;
        public static final long PROHIBITED_LIMIT = 1500l;

        public static final String ALLOWED = "ALLOWED";
        public static final String MANUAL_PROCESSING = "MANUAL_PROCESSING";
        public static final String PROHIBITED = "PROHIBITED";

        public long getAmount() {
            return amount;
        }

        public void setAmount(long amount) {
            this.amount = amount;
        }

        public String getIp() {
            return ip;
        }

        public void setIp(String ip) {
            this.ip = ip;
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {
            this.number = number;
        }

        public String getRegion() {
            return region;
        }

        public void setRegion(String region) {
            this.region = region;
        }

        public LocalDateTime getDate() {
            return date;
        }

        public void setDate(LocalDateTime date) {
            this.date = date;
        }

        public boolean validate(){
            return this.amount > 0l;
        }

        public String processingType() {

            if (this.amount <= ALLOWED_LIMIT) {
                return ALLOWED;
            } else if (this.amount <= PROHIBITED_LIMIT) {
                return MANUAL_PROCESSING;
            }
            return PROHIBITED;
        }
        @JsonPropertyOrder({ "amount", "ip", "number", "region", "date" })
        public class AmountView {
            private static final String DATE_FORMATTER= "yyyy-MM-ddTHH:mm:ss";

            public Long getAmount() {
                return Amount.this.amount;
            }

            public String getIp() {
                return Amount.this.ip;
            }

            public String getNumber() {
                return Amount.this.number;
            }
            public String getRegion() {
                return Amount.this.region;
            }
            public String getDate() {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATE_FORMATTER);
                return Amount.this.getDate().format(formatter);
            }
        }
    }
  learner_created: true
- name: src/antifraud/security/SecurityConfiguration.java
  visible: true
  text: |
    package antifraud.security;

    import antifraud.business.UserParametersService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
    import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.provisioning.InMemoryUserDetailsManager;
    import org.springframework.security.provisioning.JdbcUserDetailsManager;
    import org.springframework.security.provisioning.UserDetailsManager;
    import org.springframework.security.web.SecurityFilterChain;

    import javax.sql.DataSource;

    import static org.springframework.security.config.Customizer.withDefaults;


    @Configuration
    public class SecurityConfiguration {

        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        UserParametersService userParametersService;

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
            http
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .and()
                    .authorizeHttpRequests((authz) -> authz.anyRequest().authenticated())
                    .csrf().disable().headers().frameOptions().disable();
            return http.build();
        }

        @Bean
        public WebSecurityCustomizer webSecurityCustomizer() {
            return (web) -> web.ignoring().antMatchers("/api/auth/user", "/actuator/shutdown", "/h2-console/*");
        }

        @Bean
        public DaoAuthenticationProvider authProvider() {
            final DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
            authProvider.setUserDetailsService(userParametersService);
            authProvider.setPasswordEncoder(passwordEncoder());
            return authProvider;
        }
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }

        /*@Bean
        public UserDetailsService userDetailsService() {
            UserDetails user =
                    User.withDefaultPasswordEncoder()
                            .username("user")
                            .password("password")
                            .roles("USER")
                            .build();

            return new InMemoryUserDetailsManager(user);
        }*/

    }
  learner_created: true
- name: src/antifraud/business/TransactionService.java
  visible: true
  text: |
    package antifraud.business;

    import antifraud.AntiFraudController;
    import antifraud.persistence.TransactionHistoryRepository;
    import org.apache.logging.log4j.LogManager;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;
    import org.apache.logging.log4j.Logger;

    import java.util.*;
    import java.util.stream.Collectors;

    import static java.util.Arrays.stream;

    @Component
    public class TransactionService {
        public static final String REJECT_REASON_NUMBER = "card-number";
        public static final String REJECT_REASON_IP = "ip";
        public static final String REJECT_REASON_AMOUNT = "amount";

        public static final String REJECT_REASON_IP_CORRELATION = "ip-correlation";

        public static final String REJECT_REASON_REGION_CORRELATION = "region-correlation";

        public static final String REJECT_REASON_NONE = "none";

        public static final String REJECT_REASON_SEPARATOR = ", ";

        static final int CORRELATION_LIMIT_IP = 3;
        static final int CORRELATION_LIMIT_REGION =3;

        @Autowired
        SuspiciousIpService suspiciousIpService;
        @Autowired
        StolenCardService stolenCardService;
        @Autowired
        TransactionHistoryRepository transactionHistoryRepository;

        private static final Logger logger = LogManager
                .getLogger(TransactionService.class);

        public Map<String, Set<String>> findFraudByNumber (Amount amountToValidate ) {
            List<Amount> amountList = transactionHistoryRepository
                    .findAllByNumber(amountToValidate.getNumber());
            amountList.sort((amount1, amount2) -> amount2.getDate().compareTo(amount1.getDate()));
            List<Amount> amountListPreviousHour = amountList.stream()
                    //.filter(amount -> (amount.getDate().isAfter(amountToValidate.getDate().minusHours(1l))))
                    .filter(amount -> amount.getDate()
                            .compareTo(amountToValidate.getDate().minusHours(1l))>0)
                    .filter(amount -> (amount.getDate().compareTo(amountToValidate.getDate())<0))
                    .collect(Collectors.toList());
            logger.debug("amountListPreviousHour "
                    + amountListPreviousHour.stream()
                    .map(u -> "\n" + u.getNumber() + " " +u.getRegion() + " "
                            + u.getIp() + " " + u.getDate()).toList());

            Set<String> distinctIpSet = amountListPreviousHour.stream()
                    .map(amount -> amount.getIp()).collect(Collectors.toSet());
            distinctIpSet.add(amountToValidate.getIp());

            logger.debug("distinctIpSet: "
                    + distinctIpSet.stream()
                    .map(u -> "\n" + u)
                    .toList());

            Set<String> distinctRegionSet = amountListPreviousHour.stream()
                    .map(amount -> amount.getRegion()).collect(Collectors.toSet());
            distinctRegionSet.add(amountToValidate.getRegion());

            logger.debug("distinctRegionSet: "
                    + distinctRegionSet.stream()
                    .map(u -> "\n" + u)
                    .toList());

            Map<String, Set<String>> resultSet = new HashMap<>(2);
            resultSet.put("regions", distinctRegionSet);
            resultSet.put("ips", distinctIpSet);
            return resultSet;
        }

        public TransactionResult evaluateTransaction(Amount amount ) {

            transactionHistoryRepository.save(amount);

            String result;
            String info = REJECT_REASON_NONE;

            SortedSet<String> infoSet = new TreeSet<>();
            Set<String> resultSet = new HashSet<>();

            if ( amount.processingType().equals(Amount.PROHIBITED)) {
               infoSet.add (REJECT_REASON_AMOUNT);
            } else if (amount.processingType().equals(Amount.MANUAL_PROCESSING)) {
                info = REJECT_REASON_AMOUNT;
            }

            if (suspiciousIpService.findByIp(amount.getIp()) != null) {
                infoSet.add (REJECT_REASON_IP);
                resultSet.add(Amount.PROHIBITED);
            }

            if (stolenCardService.findByNumber(amount.getNumber()) != null) {
                infoSet.add (REJECT_REASON_NUMBER);
                resultSet.add(Amount.PROHIBITED);
            }

            Map<String, Set<String>> historyMap = findFraudByNumber( amount );
            int nIp = historyMap.get("ips").size();
            if ( nIp > CORRELATION_LIMIT_IP) {
                resultSet.add(Amount.PROHIBITED);
                infoSet.add(REJECT_REASON_IP_CORRELATION);
            } else if (nIp == CORRELATION_LIMIT_IP) {
                resultSet.add(Amount.MANUAL_PROCESSING);
                infoSet.add(REJECT_REASON_IP_CORRELATION);
            }

            int nRegion = historyMap.get("regions").size();
            if ( nRegion > CORRELATION_LIMIT_REGION) {
                resultSet.add(Amount.PROHIBITED);
                infoSet.add(REJECT_REASON_REGION_CORRELATION);
            } else if (nRegion == CORRELATION_LIMIT_REGION) {
                resultSet.add(Amount.MANUAL_PROCESSING);
                infoSet.add(REJECT_REASON_REGION_CORRELATION);
            }

            if (!infoSet.isEmpty()) {
                ArrayList<String> strings = new ArrayList<>(infoSet);
                info = String.join (REJECT_REASON_SEPARATOR, strings);
            }

            if (resultSet.contains(Amount.PROHIBITED)){
                result = Amount.PROHIBITED;
            } else if (resultSet.contains(Amount.MANUAL_PROCESSING)) {
                result = Amount.MANUAL_PROCESSING;
            } else {
                result = amount.processingType();
            }
            return new TransactionResult(result, info);
        }
    }
  learner_created: true
- name: src/antifraud/business/MyUserPrincipal.java
  visible: true
  text: |+
    package antifraud.business;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;

    public class MyUserPrincipal implements UserDetails {
        private User user;
        public MyUserPrincipal(User user) {
                this.user = user;
            }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return null;
        }

        @Override
        public String getPassword() {
            return null;
        }

        @Override
        public String getUsername() {
            return null;
        }

        @Override
        public boolean isAccountNonExpired() {
            return false;
        }

        @Override
        public boolean isAccountNonLocked() {
            return false;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return false;
        }

        @Override
        public boolean isEnabled() {
            return false;
        }
    }

  learner_created: true
- name: src/antifraud/persistence/UserRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.UserParameters;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    @Repository
    public interface UserRepository extends CrudRepository <UserParameters, Long> {
        UserParameters findUserParametersByUserId(Long userId);

        UserParameters findUserParametersByUsername(String username);

        List<UserParameters> findAll();
        UserParameters save(UserParameters toSave);

        String deleteByUsername(String username);
    }
  learner_created: true
- name: src/antifraud/security/SecurityParams.java
  visible: true
  text: |
    package antifraud.security;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.AuthorityUtils;

    import java.util.*;

    public final class SecurityParams {

        public static final String LOCKED = "locked";
        public static final String UNLOCKED = "unlocked";
        public static final String OP_LOCK = "LOCK";
        public static final String OP_UNLOCK = "UNLOCK";
        private SecurityParams() {}

        public static final String USER = "USER";
        public static final String ANONIMOUS = "ANONIMOUS";
        public static final String MERCHANT = "MERCHANT";
        public static final String ADMINISTRATOR = "ADMINISTRATOR";
        public static final String SUPPORT = "SUPPORT";

        public static final List<String> roleList = Arrays.asList (MERCHANT, SUPPORT, ADMINISTRATOR);


        public static final List<GrantedAuthority> ROLE_USER = Collections
                .unmodifiableList(AuthorityUtils.createAuthorityList(USER));

        public static final List<GrantedAuthority> ROLE_ANONIMOUS = Collections
                .unmodifiableList(AuthorityUtils.createAuthorityList("ANONIMOUS"));

        public static final List<GrantedAuthority> ROLE_MERCHANT = Collections
                .unmodifiableList(AuthorityUtils.createAuthorityList("MERCHANT"));

        public static final List<GrantedAuthority> ROLE_ADMINISTRATOR = Collections
                .unmodifiableList(AuthorityUtils.createAuthorityList("ADMINISTRATOR"));

        public static final List<GrantedAuthority> ROLE_SUPPORT = Collections
                .unmodifiableList(AuthorityUtils.createAuthorityList("SUPPORT"));

        public static final List<String> REGIONS = Arrays.asList(new String[] {
            "EAP", "ECA", "HIC", "LAC", "MENA", "SA", "SSA"
        });
        public static final List<GrantedAuthority> grants ( String role) {
            switch (role) {
                case USER -> {
                    return ROLE_USER;
                }
                case ANONIMOUS -> {
                    return ROLE_ANONIMOUS;
                }
                case MERCHANT -> {
                    return ROLE_MERCHANT;
                }
                case ADMINISTRATOR -> {
                    return ROLE_ADMINISTRATOR;
                }
                case SUPPORT -> {
                    return ROLE_SUPPORT;
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/antifraud/security/CustomRestExceptionHandler.java
  visible: true
  text: |
    package antifraud.security;

    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MissingServletRequestParameterException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    @ControllerAdvice
    public class CustomRestExceptionHandler extends ResponseEntityExceptionHandler {
        @Override
        protected ResponseEntity<Object> handleMissingServletRequestParameter
                (final MissingServletRequestParameterException ex, final HttpHeaders headers,
                 final HttpStatus status, final WebRequest request) {
            logger.info(ex.getClass().getName());
            //
            logger.debug("ResponseEntityExceptionHandler " + request.getContextPath()
                    + " Forbidden");
            return ResponseEntity.status(HttpStatus.valueOf(403)).body("Forbidden");
        }

    }
  learner_created: true
- name: src/antifraud/persistence/StolenCardRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.StolenCard;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;

    public interface StolenCardRepository extends CrudRepository <StolenCard, Long> {
        StolenCard findStolenCardByNumber (String number);
        List<StolenCard> findAll();

    }
  learner_created: true
- name: src/antifraud/business/StolenCardService.java
  visible: true
  text: |
    package antifraud.business;

    import antifraud.persistence.StolenCardRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    @Transactional
    public class StolenCardService {

        private final StolenCardRepository stolenCardRepository;

        @Autowired
        public StolenCardService(StolenCardRepository stolenCardRepository) {
            this.stolenCardRepository = stolenCardRepository;
        }

        public List<StolenCard> findAll() {
            return stolenCardRepository.findAll();
        }

        public StolenCard findByNumber(String number) {
            return stolenCardRepository.findStolenCardByNumber(number);
        }

        public StolenCard save(StolenCard stolenCard) {
            return stolenCardRepository.save(stolenCard);
        }

        public void delete(StolenCard stolenCard) {
            stolenCardRepository.delete(stolenCard);
        }
    }
  learner_created: true
- name: src/antifraud/AntiFraudController.java
  visible: true
  text: "package antifraud;\n\nimport antifraud.business.*;\nimport antifraud.security.IAuthenticationFacade;\n\
    import antifraud.security.SecurityParams;\nimport org.apache.logging.log4j.LogManager;\n\
    import org.apache.logging.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\n\
    import org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\
    import org.springframework.security.core.Authentication;\nimport org.springframework.stereotype.Controller;\n\
    import org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n\
    import static java.util.stream.Collectors.toList;\n\n@Controller\npublic class\
    \ AntiFraudController {\n\n    @Autowired\n    UserParametersService userParametersService;\n\
    \    @Autowired\n    StolenCardService stolenCardService;\n    @Autowired\n  \
    \  SuspiciousIpService suspiciousIpService;\n\n    @Autowired\n    TransactionService\
    \ transactionService;\n\n    private static final Logger logger = LogManager.getLogger(AntiFraudController.class);\n\
    \n    @Autowired\n    private IAuthenticationFacade authenticationFacade;\n\n\
    \    public String currentUserName() {\n        final Authentication authentication\
    \ = authenticationFacade.getAuthentication();\n        return authentication.getName();\n\
    \    }\n\n    @PostMapping(value=\"/api/antifraud/transaction\", produces=\"application/json\"\
    )\n    public ResponseEntity processAmount(@RequestBody Amount amount) {\n   \
    \     UserParameters checkUser = userParametersService\n                .findByUsername(currentUserName());\n\
    \n        if (checkUser.getRole().equals(SecurityParams.MERCHANT)) {\n\n     \
    \       if (checkUser.getStatus().equals(SecurityParams.LOCKED)) {\n         \
    \       logger.debug(\"PostMapping /api/antifraud/transaction1 \"\n          \
    \              + checkUser.getUsername() + \" \" + checkUser.getStatus());\n \
    \               return ResponseEntity.status(401).body(\"User status LOCKED\"\
    );\n            }\n            if (amount.validate()) {\n                logger.debug(\"\
    PostMapping/api/antifraud/transaction2 \" + amount.processingType()\n        \
    \                + \" \" + amount.getAmount());\n                return ResponseEntity.status(HttpStatus.OK)\n\
    \                        .body(transactionService.evaluateTransaction(amount));\n\
    \            } else {\n                logger.debug(\"PostMapping/api/antifraud/transaction3\
    \ \" + \"HttpStatus.BAD_REQUEST\");\n                return ResponseEntity.status(400).body(\"\
    Bad Request\");\n            }\n        }\n        logger.debug(\"/api/antifraud/transaction4\
    \ \" + checkUser.getUsername() + \" role: \" + checkUser.getRole() + \" Forbidden\"\
    );\n        return ResponseEntity.status(HttpStatus.valueOf(403)).body(\"Forbidden\"\
    );\n\n    }\n\n    @PostMapping(value = \"/api/auth/user\", produces=\"application/json\"\
    )\n    public ResponseEntity processUser ( @RequestBody UserParameters userParameters)\
    \ {\n\n        if (userParameters.getUsername() == null || userParameters.getName()\
    \ == null\n                || userParameters.getPassword() == null) {\n      \
    \      logger.debug(\"PostMapping/api/auth/user \" + \"HttpStatus.BAD_REQUEST\"\
    );\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\" \
    \   \");\n        }\n\n        UserParameters userParam = userParametersService.findByUsername(userParameters.getUsername());\n\
    \        if (userParam != null) {\n            logger.debug(\"/api/auth/user\"\
    \ + \"HttpStatus.CONFLICT\");\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(\"\
    \    \");\n        }\n        userParameters = userParametersService.saveFirstTime(userParameters);//first\
    \ saving of password needs processing\n\n        UserParameters userParam2 = userParametersService.save(userParameters);\n\
    \        logger.debug(\"/api/auth/user\" + userParam2.getName());\n        return\
    \ ResponseEntity.status(HttpStatus.valueOf(201)).body(userParam2.new UserViewerId());\n\
    \    }\n\n    @PutMapping(value = \"/api/auth/access\", produces=\"application/json\"\
    )\n    public ResponseEntity accessControl ( @RequestBody UserStatus userStatus)\
    \ {\n        UserParameters checkAdmin = userParametersService\n             \
    \   .findByUsername(currentUserName());\n\n        if (checkAdmin.getRole().equals(SecurityParams.ADMINISTRATOR))\
    \ {\n            logger.debug(\"/api/auth/access1 Operation: \" + userStatus.getUsername()\n\
    \                    + \" -> \" + userStatus.getOperation());\n            String\
    \ lockState = \"NONE\";\n\n            UserParameters user = userParametersService.findByUsername(userStatus.getUsername());\n\
    \            if (user == null) {\n                logger.debug(\"/api/auth/access2\
    \ \" + userStatus.getUsername());\n                return ResponseEntity.status(HttpStatus.valueOf(404)).body(userStatus.getUsername()\n\
    \                        + \" not found\");\n            }\n            if (userStatus.getOperation().equals(SecurityParams.OP_LOCK))\
    \ {\n                if (user.getRole().equals(SecurityParams.ADMINISTRATOR))\
    \ {\n                    logger.debug(\"/api/auth/access3 \" + userStatus.getUsername()\n\
    \                            + \": \" + user.getRole() + \" -> \" + userStatus.getOperation());\n\
    \                    return ResponseEntity.status(HttpStatus.valueOf(400)).body(\"\
    Bad request \"\n                            + userStatus.getOperation());\n  \
    \              }\n                lockState = SecurityParams.LOCKED;\n       \
    \     } else if (userStatus.getOperation().equals(SecurityParams.OP_UNLOCK)) {\n\
    \                lockState = SecurityParams.UNLOCKED;\n            } else {\n\
    \                logger.debug(\"/api/auth/access4 \" + userStatus.getUsername()\n\
    \                        + \" -> \" + userStatus.getOperation());\n          \
    \      return ResponseEntity.status(HttpStatus.valueOf(400)).body(\"Bad request\
    \ \"\n                        + userStatus.getOperation());\n            }\n\n\
    \            user.setStatus(lockState);\n            userParametersService.save(user);\n\
    \            logger.debug(\"/api/auth/access5 \" + user.getName() + \" -> \" +\
    \ lockState);\n            return ResponseEntity.status(HttpStatus.valueOf(200)).body(\"\
    {\\n\" +\n                    \"    \\\"status\\\": \\\"User \" + user.getUsername()\
    \ + \" \" + lockState + \"!\\\"\\n\" +\n                    \"}\");\n        }\n\
    \        logger.debug(\"/api/auth/access6 \" + userStatus.getUsername() + \" ->\
    \ \" + userStatus.getOperation() + \" Forbidden\");\n        return ResponseEntity.status(HttpStatus.valueOf(403)).body(\"\
    Forbidden\");\n    }\n\n    @PutMapping(value = \"/api/auth/role\", produces=\"\
    application/json\")\n    public ResponseEntity roleControl ( @RequestBody UserParameters\
    \ userParameters) {\n        UserParameters checkAdmin = userParametersService\n\
    \                .findByUsername(currentUserName());\n        if (checkAdmin.getRole().equals(SecurityParams.ADMINISTRATOR))\
    \ {\n\n            UserParameters user = userParametersService.findByUsername(\
    \ userParameters.getUsername());\n            if (user == null) {\n          \
    \      logger.debug(\"/api/auth/role1 \" + userParameters.getUsername());\n  \
    \              return ResponseEntity.status(HttpStatus.valueOf(404)).body(userParameters.getUsername()\n\
    \                        + \" not found\");\n            }\n            if (user.getRole().equals(SecurityParams.ADMINISTRATOR))\
    \ {\n                logger.debug(\"/api/auth/role2 \" + userParameters.getUsername()\
    \ + \" -> \" + userParameters.getRole());\n                return ResponseEntity.status(HttpStatus.valueOf(400)).body(\"\
    Bad request ADMINISTRATOR -> \"\n                        + userParameters.getRole());\n\
    \            }\n            if (userParameters.getRole().equals(SecurityParams.ADMINISTRATOR)\n\
    \                    || !SecurityParams.roleList.contains(userParameters.getRole()))\
    \ {\n                logger.debug(\"/api/auth/role3 \" + userParameters.getUsername()\
    \ + \" -> \" + userParameters.getRole());\n                return ResponseEntity.status(HttpStatus.valueOf(400)).body(\"\
    Bad request  -> \"\n                        + userParameters.getRole());\n   \
    \         }\n            if (user.getRole().equals(userParameters.getRole()))\
    \ {\n                logger.debug(\"/api/auth/role4 \" + userParameters.getUsername()\
    \ + \" -> \" + userParameters.getRole());\n                return ResponseEntity.status(HttpStatus.valueOf(409)).body(\"\
    Conflict -> \"\n                        + userParameters.getRole());\n       \
    \     }\n\n\n            user.setRole(userParameters.getRole());\n           \
    \ userParametersService.save(user);\n            logger.debug(\"/api/auth/role4\
    \ \" + user.getName() + \" -> \" + user.getRole());\n            return ResponseEntity.status(HttpStatus.valueOf(200)).body(user.new\
    \ UserViewerId());\n        }\n        logger.debug(\"/api/auth/role5 \" + userParameters.getUsername()\
    \ + \" -> \" + userParameters.getRole() + \" Forbidden\");\n        return ResponseEntity.status(HttpStatus.valueOf(403)).body(\"\
    Forbidden\");\n    }\n    @GetMapping (value = \"/api/auth/list\", produces=\"\
    application/json\")\n    public ResponseEntity listUsers (String userName){\n\
    \        UserParameters checkAdmin = userParametersService\n                .findByUsername(currentUserName());\n\
    \        if ((checkAdmin.getRole().equals(SecurityParams.ADMINISTRATOR)) ||\n\
    \                    checkAdmin.getRole().equals(SecurityParams.SUPPORT)) {\n\
    \            List<UserParameters> userParametersList = userParametersService.findAll();\n\
    \            logger.debug(\"GetMapping/api/auth/list1 \"\n                   \
    \ + userParametersList.stream().map(u -> \"\\n\" + u.getName()).toList());\n \
    \           return ResponseEntity.status(HttpStatus.OK)\n                    .body(userParametersList.stream().map(u\
    \ -> u.new UserViewerId()).toList());\n        }\n\n        logger.debug(\"/api/auth/list2\
    \ \" + checkAdmin.getUsername() + \" role: \" + checkAdmin.getRole());\n     \
    \   return ResponseEntity.status(HttpStatus.valueOf(403)).body(\"Bad request \"\
    \n                + checkAdmin.getRole());\n    }\n\n\n    @DeleteMapping (value\
    \ = \"/api/auth/user/{username}\",  produces=\"application/json\")\n    public\
    \ ResponseEntity deleteUser ( @PathVariable String username) {\n        logger.debug(\"\
    DeleteMapping /api/auth/user/{username} \" + username);\n        return processDeleteRequest(username);\n\
    \    }\n\n    private ResponseEntity<?> processDeleteRequest(String username)\
    \ {\n        UserParameters checkAdmin = userParametersService\n             \
    \       .findByUsername(currentUserName());\n\n        if (checkAdmin.getRole().equals(SecurityParams.ADMINISTRATOR)\
    \ && username != null) {\n            String result = userParametersService.delete(username);\n\
    \            logger.debug(\"DeleteMapping \" + username + \" Result: \" + result);\n\
    \            if (result.equals(\"0\")) {\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n\
    \            }\n            return ResponseEntity.status(HttpStatus.OK).body(\"\
    {\\n\" +\n                    \"   \\\"username\\\": \" + username + \",\\n\"\
    \ +\n                    \"   \\\"status\\\": \\\"Deleted successfully!\\\"\\\
    n\" +\n                    \"}\");\n        }\n        logger.debug(\"DeleteMapping\
    \ op for \" + checkAdmin.getUsername()\n                + \" role: \" + checkAdmin.getRole()\
    \ + \" Forbidden\");\n        return ResponseEntity.status(HttpStatus.valueOf(403)).body(\"\
    Forbidden\");\n    }\n\n    @DeleteMapping (value = \"/api/auth/user\",  produces=\"\
    application/json\")\n    public ResponseEntity deleteWithRequest ( @RequestParam\
    \ String username) {\n        logger.debug(\"DeleteMapping /api/auth/user \" +\
    \ username);\n        return processDeleteRequest(username);\n    }\n\n   /* private\
    \ boolean checkCurrentUserRole (String role) {\n        UserParameters currentUser\
    \ = userParametersService\n                .findByUsername(currentUserName());\n\
    \        return (currentUser.getRole().equals(role));\n    }*/\n        \n   \
    \ //POST, DELETE, GET api/antifraud/suspicious-ip SUPPORT role only\n    @PostMapping\
    \ (value = \"api/antifraud/suspicious-ip\", produces=\"application/json\")\n \
    \   public ResponseEntity addToIpList(@RequestBody SuspiciousIp ipToSave) {\n\
    \        UserParameters currentUser = userParametersService\n                .findByUsername(currentUserName());\n\
    \n        if (!currentUser.getRole().equals(SecurityParams.SUPPORT)) {\n     \
    \       logger.debug(\"PostMapping /api/antifraud/suspicious-ip1 \" + currentUser.getUsername()\n\
    \                    + \" role: \" + currentUser.getRole() + \" Forbidden\");\n\
    \             return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"Forbidden\"\
    );\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"PostMapping /api/antifraud/suspicious-ip2 \"\n\
    \                    + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n        if (!ParameterChecker.isValidIPAddress(ipToSave.getIp()))\
    \ {\n            logger.debug(\"PostMapping /api/antifraud/suspicious-ip3 \"\n\
    \                    + currentUser.getUsername() + \" posted bad IP: \" + ipToSave.getIp());\n\
    \            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n          \
    \          .body(\"Bad Request: \" + ipToSave.getIp());\n        }\n        if\
    \ (suspiciousIpService.findByIp(ipToSave.getIp()) != null){\n            logger.debug(\"\
    PostMapping /api/antifraud/suspicious-ip4 \"\n                    + currentUser.getUsername()\
    \ + \" posted conflict: \" + ipToSave.getIp());\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(\"\
    Conflict: \" + ipToSave.getIp());\n        }\n        SuspiciousIp ip = suspiciousIpService.save(ipToSave);\n\
    \        logger.debug(\"PostMapping /api/antifraud/suspicious-ip5 \"\n       \
    \         + currentUser.getUsername() + \" saved \" + ip.getIp());\n        return\
    \ ResponseEntity.status(HttpStatus.OK).body(ip);\n    }\n\n    @GetMapping (value\
    \ = \"api/antifraud/suspicious-ip\", produces=\"application/json\")\n    public\
    \ ResponseEntity receiveIpList() {\n        UserParameters currentUser = userParametersService\n\
    \                .findByUsername(currentUserName());\n        if (!currentUser.getRole().equals(SecurityParams.SUPPORT))\
    \ {\n            logger.debug(\"GetMapping /api/antifraud/suspicious-ip1 \" +\
    \ currentUser.getUsername()\n                    + \" role: \" + currentUser.getRole()\
    \ + \" Forbidden\");\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"\
    Forbidden\");\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"GetMapping /api/antifraud/suspicious-ip2 \"\n\
    \                    + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n\n        List<SuspiciousIp> ipList = suspiciousIpService.findAll();\n\
    \        logger.debug(\"GetMapping /api/antifraud/suspicious-ip3 \"\n        \
    \        + ipList.stream().map(u -> \"\\n\" + u.getIp()).toList());\n        return\
    \ ResponseEntity.status(HttpStatus.OK).body(ipList);\n    }\n\n    @DeleteMapping\
    \ (value = \"api/antifraud/suspicious-ip/{ipToRemove}\", produces=\"application/json\"\
    )\n    public ResponseEntity removeIp (@PathVariable String ipToRemove) {\n  \
    \      UserParameters currentUser = userParametersService\n                .findByUsername(currentUserName());\n\
    \        if (!currentUser.getRole().equals(SecurityParams.SUPPORT)) {\n      \
    \      logger.debug(\"DeleteMapping api/antifraud/suspicious-/{ipToRemove}1 \"\
    \ + currentUser.getUsername()\n                    + \" role: \" + currentUser.getRole()\
    \ + \" Forbidden\");\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"\
    Forbidden\");\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{ipToRemove}2\
    \ \"\n                    + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n        if (!ParameterChecker.isValidIPAddress(ipToRemove)) {\n  \
    \          logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{ipToRemove}3\
    \ \"\n                    + currentUser.getUsername() + \" posted bad IP: \" +\
    \ ipToRemove);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n\
    \                    .body(\"Bad Request: \" + ipToRemove);\n        }\n     \
    \   SuspiciousIp suspiciousIp = suspiciousIpService.findByIp(ipToRemove);\n  \
    \      if ( suspiciousIp == null){\n            logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{ipToRemove}4\
    \ \"\n                    + currentUser.getUsername() + \" Not Found: \" + ipToRemove);\n\
    \            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Not Found:\
    \ \" + ipToRemove);\n        }\n        suspiciousIpService.delete(suspiciousIp);\n\
    \        logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{ipToRemove}5\
    \ \"\n                + currentUser.getUsername() + \" deleted \" + suspiciousIp.getIp());\n\
    \        return ResponseEntity.status(HttpStatus.OK).body(\"{\\n\" +\n       \
    \         \"   \\\"status\\\": \\\"IP \" + suspiciousIp.getIp() + \" successfully\
    \ removed!\\\"\\n\" +\n                \"}\");\n    }\n\n\n    //POST, DELETE,\
    \ GET api/antifraud/stolencard SUPPORT role only\n\n    @PostMapping (value =\
    \ \"api/antifraud/stolencard\", produces=\"application/json\")\n    public ResponseEntity\
    \ addToStolenCardList(@RequestBody StolenCard cardToSave) {\n        UserParameters\
    \ currentUser = userParametersService\n                .findByUsername(currentUserName());\n\
    \        if (!currentUser.getRole().equals(SecurityParams.SUPPORT)) {\n      \
    \      logger.debug(\"PostMapping /api/antifraud/stolencard1 \" + currentUser.getUsername()\n\
    \                    + \" role: \" + currentUser.getRole() + \" Forbidden\");\n\
    \            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"Forbidden\"\
    );\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"PostMapping /api/antifraud/stolencard2 \"\n  \
    \                  + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n        if (!ParameterChecker.checkLuhn(cardToSave.getNumber())) {\n\
    \            logger.debug(\"PostMapping /api/antifraud/stolencard3 \"\n      \
    \              + currentUser.getUsername() + \" posted bad card number: \"\n \
    \                   + cardToSave.getNumber());\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n\
    \                    .body(\"Bad Request: \" + cardToSave.getNumber());\n    \
    \    }\n        StolenCard stolenCard = stolenCardService.findByNumber(cardToSave.getNumber());\n\
    \        if (stolenCard != null){\n            logger.debug(\"PostMapping /api/antifraud/stolencard\
    \ \" + currentUser.getUsername()\n                    + \" posted conflict: \"\
    \ + stolenCard.getNumber());\n            return ResponseEntity.status(HttpStatus.CONFLICT)\n\
    \                    .body(\"Conflict: \" + stolenCard.getNumber());\n       \
    \ }\n        StolenCard stolenCard1 = stolenCardService.save(cardToSave);\n  \
    \      logger.debug(\"PostMapping /api/antifraud/suspicious-ip5 \"\n         \
    \       + currentUser.getUsername() + \" saved \" + stolenCard1.getNumber());\n\
    \        return ResponseEntity.status(HttpStatus.OK).body(stolenCard1);\n    }\n\
    \n    @GetMapping (value = \"api/antifraud/stolencard\", produces=\"application/json\"\
    )\n    public ResponseEntity receiveStolenCardList() {\n        UserParameters\
    \ currentUser = userParametersService\n                .findByUsername(currentUserName());\n\
    \        if (!currentUser.getRole().equals(SecurityParams.SUPPORT)) {\n      \
    \      logger.debug(\"GetMapping /api/antifraud/stolencard1 \" + currentUser.getUsername()\n\
    \                    + \" role: \" + currentUser.getRole() + \" Forbidden\");\n\
    \            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"Forbidden\"\
    );\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"GetMapping /api/antifraud/stolencard2 \"\n   \
    \                 + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n\n        List<StolenCard> stolenCardList = stolenCardService.findAll();\n\
    \        logger.debug(\"GetMapping /api/antifraud/stolencard3 \"\n           \
    \     + stolenCardList.stream().map(u -> \"\\n\" + u.getNumber()).toList());\n\
    \        return ResponseEntity.status(HttpStatus.OK).body(stolenCardList);\n \
    \   }\n\n    @DeleteMapping (value = \"api/antifraud/stolencard/{cardNoToRemove}\"\
    , produces=\"application/json\")\n    public ResponseEntity removeCardNo (@PathVariable\
    \ String cardNoToRemove) {\n        UserParameters currentUser = userParametersService\n\
    \                .findByUsername(currentUserName());\n        if (!currentUser.getRole().equals(SecurityParams.SUPPORT))\
    \ {\n            logger.debug(\"DeleteMapping api/antifraud/suspicious-/{cardNoToRemove}1\
    \ \"\n                    + currentUser.getUsername()\n                    + \"\
    \ role: \" + currentUser.getRole() + \" Forbidden\");\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(\"\
    Forbidden\");\n        }\n        if (currentUser.getStatus().equals(SecurityParams.LOCKED))\
    \ {\n            logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{cardNoToRemove}2\
    \ \"\n                    + currentUser.getUsername() + \" \" + currentUser.getStatus());\n\
    \            return ResponseEntity.status(401).body(\"User status LOCKED\");\n\
    \        }\n        if (!ParameterChecker.checkLuhn(cardNoToRemove)) {\n     \
    \       logger.debug(\"DeleteMapping /api/antifraud/stolencard/{cardNoToRemove}3\
    \ \"\n                    + currentUser.getUsername() + \" posted bad IP: \" +\
    \ cardNoToRemove);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n\
    \                    .body(\"Bad Request: \" + cardNoToRemove);\n        }\n \
    \       StolenCard stolenCard = stolenCardService.findByNumber(cardNoToRemove);\n\
    \        if ( stolenCard == null){\n            logger.debug(\"DeleteMapping /api/antifraud/stolencard/{cardNoToRemove}4\
    \ \"\n                    + currentUser.getUsername() + \" Not Found: \" + cardNoToRemove);\n\
    \            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Not Found:\
    \ \"\n                    + cardNoToRemove);\n        }\n        stolenCardService.delete(stolenCard);\n\
    \        logger.debug(\"DeleteMapping /api/antifraud/suspicious-ip/{ipToRemove}5\
    \ \"\n                + currentUser.getUsername() + \" deleted \" + stolenCard.getNumber());\n\
    \        return ResponseEntity.status(HttpStatus.OK).body(\"{\\n\" +\n       \
    \         \"   \\\"status\\\": \\\"Card \" + stolenCard.getNumber() + \" successfully\
    \ removed!\\\"\\n\" +\n                \"}\");\n    }\n\n\n}\n"
  learner_created: true
- name: src/antifraud/security/IAuthenticationFacade.java
  visible: true
  text: |
    package antifraud.security;

    import org.springframework.security.core.Authentication;

    public interface IAuthenticationFacade {

        Authentication getAuthentication();

    }
  learner_created: true
- name: src/antifraud/business/StolenCard.java
  visible: true
  text: |
    package antifraud.business;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;

    @Entity
    @Table
    public class StolenCard {
        @Id
        @Column
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Column
        @NotNull
        private String number;

        public StolenCard() {
        }

        public StolenCard(String number) {
            this.number = number;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {
            this.number = number;
        }
    }
  learner_created: true
- name: src/antifraud/business/UserParameters.java
  visible: true
  text: |
    package antifraud.business;


    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    import javax.persistence.*;
    import javax.validation.constraints.NotNull;

    @Entity
    @Table
    public class UserParameters {
        @Id
        @JsonIgnore
        @Column
        @GeneratedValue (strategy = GenerationType.IDENTITY)
        private Long userId;

        @Column
        @NotNull
        private String name;

        @Column
        @NotNull
        private String username;

        @Column
        @NotNull
        private String password;

        @Column
        @NotNull
        private String role;

        @Column
        private String status;


        public UserParameters(String name, String username, String password, String role, String status) {
            this.name = name;
            this.username = username;
            this.password = password;
            this.role = role;
            this.status = status;
        }

        public UserParameters() {
        }

        public Long getUserId() {
            return userId;
        }

        public void setUserId(Long userId) {
            this.userId = userId;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username.toLowerCase();
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }


        @JsonPropertyOrder({"id", "name", "username", "role"})
        public class UserViewerId {

            public String getName() {
                return UserParameters.this.name;
            }

            public String getUsername() {
                return UserParameters.this.username;
            }

            public Long getId() {
                return UserParameters.this.userId;
            }

            public String getRole() {
                return UserParameters.this.role;
            }

        }

        @JsonPropertyOrder ({"username", "role"})
        public class UserViewer {

            public String getUsername() {
                return UserParameters.this.username;
            }

            public String getRole() {
                return UserParameters.this.role;
            }

        }
    }
  learner_created: true
- name: src/antifraud/persistence/SuspiciousIpRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.SuspiciousIp;
    import antifraud.business.UserParameters;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.List;

    @Repository
    public interface SuspiciousIpRepository extends CrudRepository <SuspiciousIp, Long> {
        SuspiciousIp findSuspiciousIpByIp (String ip);

        List<SuspiciousIp> findAll();
    }
  learner_created: true
- name: src/antifraud/business/SuspiciousIpService.java
  visible: true
  text: |
    package antifraud.business;

    import antifraud.persistence.SuspiciousIpRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    @Transactional
    public class SuspiciousIpService {

        private final SuspiciousIpRepository suspiciousIpRepository;

        @Autowired
        public SuspiciousIpService(SuspiciousIpRepository suspiciousIpRepository) {
            this.suspiciousIpRepository = suspiciousIpRepository;
        }

        public SuspiciousIp save(SuspiciousIp ip) {
            return suspiciousIpRepository.save(ip);
        }

        public SuspiciousIp findByIp(String ip) {
            return suspiciousIpRepository.findSuspiciousIpByIp(ip);
        }

        public List<SuspiciousIp> findAll() {
            return suspiciousIpRepository.findAll();
        }

        public void delete(SuspiciousIp ip) {
            suspiciousIpRepository.delete(ip);
        }
    }
  learner_created: true
- name: src/antifraud/business/TransactionResult.java
  visible: true
  text: |
    package antifraud.business;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;

    @JsonPropertyOrder ({"result", "info"})
    public class TransactionResult {
        @JsonProperty
        String result;
        @JsonProperty
        String info;

        public TransactionResult( String result, String info) {
            this.result = result;
            this.info = info;
        }

        public String getResult() {
            return result;
        }

        public void setResult(String result) {
            this.result = result;
        }

        public String getInfo() {
            return info;
        }

        public void setInfo(String info) {
            this.info = info;
        }
    }
  learner_created: true
- name: src/antifraud/persistence/TransactionHistoryRepository.java
  visible: true
  text: |
    package antifraud.persistence;

    import antifraud.business.Amount;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;

    public interface TransactionHistoryRepository extends CrudRepository<Amount, Long> {
        List<Amount> findAllByNumber(String number);

    }
  learner_created: true
- name: src/antifraud/business/UserParametersService.java
  visible: true
  text: |
    package antifraud.business;


    import antifraud.persistence.UserRepository;
    import antifraud.security.SecurityParams;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.transaction.annotation.Transactional;

    import java.util.List;

    @Service
    @Transactional
    public class UserParametersService implements UserDetailsService {

        private final UserRepository userRepository;

        @Autowired
        public UserParametersService(UserRepository userRepository) {
            this.userRepository = userRepository;
        }

        @Autowired
        PasswordEncoder passwordEncoder;

        public UserParameters encodePassword(UserParameters userParameters) {
            userParameters.setPassword(passwordEncoder.encode(userParameters.getPassword()));
            return userParameters;
        }
        public UserParameters save(UserParameters userParameters) {
            UserParameters userParameters1 = userRepository.save(userParameters);
            return userParameters1;
        }

        public UserParameters findByUsername(String name) {
            UserParameters userParameters1 = userRepository.findUserParametersByUsername(name);
            return userParameters1;
        }

        public List<UserParameters> findAll() {
            return userRepository.findAll();
        }

        public String delete(String username) {
            return userRepository.deleteByUsername(username);
        }

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            UserParameters userParameters = userRepository.findUserParametersByUsername(username);
            if (userParameters == null) {
                throw new UsernameNotFoundException(username);
            }
            User user = new User(userParameters.getUsername(), userParameters.getPassword(), SecurityParams.ROLE_USER);
            return user; //new MyUserPrincipal(user);
        }

        public UserParameters saveFirstTime(UserParameters userParameters) {
            List<UserParameters> list = findAll();
            if ( list.size() == 0) {
                userParameters.setRole(SecurityParams.ADMINISTRATOR);
                userParameters.setStatus(SecurityParams.UNLOCKED);
            }
            else {
                userParameters.setRole(SecurityParams.MERCHANT);
                userParameters.setStatus(SecurityParams.LOCKED);
            }
            userParameters.setPassword(passwordEncoder.encode(userParameters.getPassword()));
            return save(userParameters);
        }
    }
  learner_created: true
- name: src/antifraud/business/TransactionLimits.java
  visible: true
  learner_created: true
- name: src/antifraud/persistence/TransactionLimitsRepository.java
  visible: true
  learner_created: true
- name: src/antifraud/business/TransactionHistoryService.java
  visible: true
  learner_created: true
- name: src/antifraud/business/TransactionFeedback.java
  visible: true
  learner_created: true
- name: src/antifraud/business/TransactionLimitsService.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/18072#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #121

    PUT /api/antifraud/transaction should respond with status code 422, responded: 200
    Response body:
    {
      &quot;transactionId&quot; : 2,
      &quot;amount&quot; : 1,
      &quot;ip&quot; : &quot;192.168.1.1&quot;,
      &quot;number&quot; : &quot;4000008449433403&quot;,
      &quot;region&quot; : &quot;EAP&quot;,
      &quot;date&quot; : &quot;2022-01-22T16:00:00&quot;,
      &quot;result&quot; : &quot;ALLOWED&quot;,
      &quot;feedback&quot; : &quot;PROHIBITED&quot;,
      &quot;info&quot; : &quot;none&quot;
    }
  time: "Thu, 12 Jan 2023 09:51:30 UTC"
record: 6
